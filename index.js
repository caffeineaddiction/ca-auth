// Generated by CoffeeScript 1.8.0
(function() {
  var crypto, init, objAuth, sqlite3, __Authdb, __Hash, __HashKey,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sqlite3 = require('sqlite3');

  crypto = require('crypto');

  __HashKey = " This Key Should really be set on init ";

  __HashKey += " I could generate at random on run but ";

  __HashKey += " then old databases wouldnt work right ";

  __Authdb = null;

  init = function(aOpt) {
    var cb, tStmt;
    if (aOpt != null) {
      if (aOpt.key != null) {
        __HashKey = aOpt.key;
      }
      if (aOpt.path != null) {
        __Authdb = new sqlite3.Database(aOpt.path);
      }
    } else {
      __Authdb = new sqlite3.Database("_auth.db");
    }
    tStmt = "CREATE TABLE IF NOT EXISTS _auth (";
    tStmt += " authUID INTEGER PRIMARY KEY,";
    tStmt += " authNameHash TEXT,";
    tStmt += " authPWHash TEXT,";
    tStmt += " authPWSalt TEXT,";
    tStmt += " authPerm TEXT,";
    tStmt += " isEnabled INTEGER";
    tStmt += " )";
    cb = aOpt.callback;
    return __Authdb.run(tStmt, cb);
  };

  __Hash = function(aValue, aKey, aSalt) {
    var tHash;
    tHash = crypto.createHmac('sha256', aKey);
    if (aValue != null) {
      tHash.update(aValue);
    }
    if (aSalt != null) {
      tHash.update(aSalt);
    }
    return tHash.digest('base64');
  };

  objAuth = (function() {
    function objAuth() {
      this._populate = __bind(this._populate, this);
      this._update = __bind(this._update, this);
      this._find = __bind(this._find, this);
      this["delete"] = __bind(this["delete"], this);
      this.update = __bind(this.update, this);
      this.create = __bind(this.create, this);
      this.authenticate = __bind(this.authenticate, this);
      this._next = __bind(this._next, this);
      this.objLocked = 0;
      this.taskQue = [];
      this.exists = 0;
    }

    objAuth.prototype._next = function() {
      var tFn;
      tFn = this.taskQue.shift();
      if (tFn != null) {
        return tFn();
      }
    };

    objAuth.prototype.authenticate = function(aOpt) {
      var k, tNameHash, tOpt, tPWHash, v;
      tOpt = {};
      for (k in aOpt) {
        v = aOpt[k];
        if (k === 'authName' || k === 'authPW' || k === 'callback') {
          tOpt[k] = v;
        }
      }
      if (this.args == null) {
        if (aOpt.authName == null) {
          if (aOpt.callback != null) {
            aOpt.callback('no name');
          }
          return;
        }
        if (aOpt.authPW == null) {
          if (aOpt.callback != null) {
            aOpt.callback('no pass');
          }
          return;
        }
        this.taskQue.push(this.authenticate);
        this._find(tOpt);
        return;
      }
      tNameHash = __Hash(this.args.authName, __HashKey);
      tPWHash = __Hash(this.args.authPW, __HashKey, this.authPWSalt);
      if (this.exists === -1) {
        if (this.args.callback != null) {
          this.args.callback("not exist");
        }
        return;
      }
      if (this.isEnabled !== 1 && (this.args.callback != null)) {
        if (this.args.callback != null) {
          this.args.callback("disabled");
        }
        return;
      }
      if (this.authPWHash !== tPWHash && (this.args.callback != null)) {
        this.args.callback("bad pass");
        return;
      }
      if (this.authPWHash === tPWHash && (this.args.callback != null)) {
        if (this.args.callback != null) {
          this.args.callback(this.authUID);
        }
        return;
      }
      if (this.args.callback != null) {
        return this.args.callback("auth error");
      }
    };

    objAuth.prototype.create = function(aOpt) {
      var k, tOpt, v;
      tOpt = {};
      for (k in aOpt) {
        v = aOpt[k];
        if (k === 'authName' || k === 'authPW' || k === 'callback') {
          tOpt[k] = v;
        }
      }
      if (this.args == null) {
        if ((tOpt.authName == null) || (tOpt.authPW == null)) {
          if (tOpt.callback != null) {
            tOpt.callback("create error");
          }
          return;
        }
        this.taskQue.push(this.create);
        this._find(tOpt);
        return;
      }
      if (this.exists === -1) {
        this._update();
        if (this.args.callback != null) {
          this.args.callback("created");
        }
        return;
      }
      if (this.exists === 1) {
        if (this.args.callback != null) {
          this.args.callback("exists");
        }
        return;
      }
      if (this.args.callback != null) {
        this.args.callback("create error");
      }
    };

    objAuth.prototype.update = function(aOpt) {
      var k, tOpt, v;
      tOpt = {};
      for (k in aOpt) {
        v = aOpt[k];
        if (k === 'authUID' || k === 'authName' || k === 'authPW' || k === 'authPerm' || k === 'isEnabled' || k === 'callback') {
          tOpt[k] = v;
        }
      }
      if (this.args == null) {
        this.taskQue.push(this.update);
        this._find(tOpt);
        return;
      }
      if (this.exists === -1) {
        if (this.args.callback != null) {
          this.args.callback("not exist");
        }
        return;
      }
      if (this.exists === 1) {
        this._update();
        if (this.args.callback != null) {
          this.args.callback("updated");
        }
        return;
      }
      if (this.args.callback != null) {
        this.args.callback("update error");
      }
    };

    objAuth.prototype["delete"] = function(aOpt) {
      var k, tOpt, v;
      tOpt = {};
      for (k in aOpt) {
        v = aOpt[k];
        if (k === 'authUID' || k === 'callback') {
          tOpt[k] = v;
        }
      }
      if (this.args == null) {
        this.taskQue.push(this["delete"]);
        this._find(aOpt);
        return;
      }
      if (this.exists === -1) {
        if (this.args.callback != null) {
          this.args.callback("not exist");
        }
        return;
      }
      if (this.exists === 1) {
        this.isEnabled = 0;
        this._update();
        return;
      }
      if (this.args.callback != null) {
        this.args.callback("delete error");
      }
    };

    objAuth.prototype._find = function(aOpt) {
      var tNameHash;
      if (aOpt != null) {
        this.objLocked = 1;
        this.args = aOpt;
        if (aOpt.authUID != null) {
          __Authdb.get(" SELECT * FROM _auth WHERE authUID = ?", aOpt.authUID, this._populate);
          return;
        }
        if ((aOpt.authName != null) || (aOpt.authNameHash != null)) {
          tNameHash = aOpt.authNameHash;
          if (tNameHash == null) {
            tNameHash = __Hash(aOpt.authName, __HashKey);
          }
          __Authdb.get(" SELECT * FROM _auth WHERE authNameHash = ?", tNameHash, this._populate);
          return;
        }
      }
      if (this.args.callback != null) {
        this.args.callback("_find error");
      }
    };

    objAuth.prototype._update = function() {
      var tCol, tFill, tOpt, tStmt, tVal;
      tFill = {};
      if (this.args.authName != null) {
        tFill.$authNameHash = __Hash(this.args.authName, __HashKey);
      }
      if (this.args.authPW != null) {
        tFill.$authPWSalt = crypto.randomBytes(32).toString('base64');
        tFill.$authPWHash = __Hash(this.args.authPW, __HashKey, tFill.$authPWSalt);
      }
      if (this.args.authPerm != null) {
        tFill.$authPerm = this.args.authPerm;
      }
      if (this.args.isEnabled != null) {
        tFill.$isEnabled = this.args.isEnabled;
      }
      if (tFill.$authNameHash == null) {
        tFill.$authNameHash = this.authNameHash;
      }
      if (tFill.$authPWSalt == null) {
        tFill.$authPWSalt = this.authPWSalt;
      }
      if (tFill.$authPWHash == null) {
        tFill.$authPWHash = this.authPWHash;
      }
      if (tFill.$authPerm == null) {
        tFill.$authPerm = this.authPerm || "";
      }
      if (this.isEnabled != null) {
        if (tFill.$isEnabled == null) {
          tFill.$isEnabled = this.isEnabled;
        }
      }
      if (tFill.$isEnabled == null) {
        tFill.$isEnabled = 1;
      }
      if ((tFill.$authNameHash == null) && (tFill.$authPWSalt != null) && (tFill.$authPWHash != null)) {
        if (this.args.callback != null) {
          this.args.callback();
        }
        return;
      }
      if (this.authUID != null) {
        if (this.authUID != null) {
          tFill.$authUID = this.authUID;
        }
        tCol = "authUID,";
        tVal = "$authUID,";
      } else {
        tCol = "";
        tVal = "";
      }
      tStmt = "REPLACE INTO _auth (" + tCol + "authNameHash,authPWHash,authPWSalt,authPerm,isEnabled) ";
      tStmt += "VALUES (" + tVal + "$authNameHash,$authPWHash,$authPWSalt,$authPerm,$isEnabled) ";
      tOpt = {
        authNameHash: tFill.$authNameHash,
        callback: this.args.callback
      };
      __Authdb.run(tStmt, tFill, (function(_this) {
        return function(e, r) {
          return _this._find(tOpt);
        };
      })(this));
    };

    objAuth.prototype._populate = function(e, r) {
      if (e != null) {
        this.args.callback(e);
        return;
      }
      if (r != null) {
        this.exists = 1;
        this.authUID = r.authUID;
        this.authNameHash = r.authNameHash;
        this.authPWHash = r.authPWHash;
        this.authPWSalt = r.authPWSalt;
        this.authPerm = r.authPerm;
        this.isEnabled = r.isEnabled;
      } else {
        this.exists = -1;
      }
      this.objLocked = 0;
      this._next();
    };

    return objAuth;

  })();

  module.exports = {
    init: function(aOpt) {
      return init(aOpt);
    },
    dbclose: function() {
      return __Authdb.close();
    },
    create: function(aOpt) {
      var tAO;
      tAO = new objAuth();
      return tAO.create(aOpt);
    },
    authenticate: function(aOpt) {
      var tAO;
      tAO = new objAuth();
      return tAO.authenticate(aOpt);
    },
    update: function(aOpt) {
      var tAO;
      tAO = new objAuth();
      return tAO.update(aOpt);
    },
    "delete": function(aOpt) {
      var tAO;
      tAO = new objAuth();
      return tAO["delete"](aOpt);
    }
  };

}).call(this);

// Generated by CoffeeScript 1.8.0
(function() {
  var crypto, events, sqlite3, __Auth_tbl, __Authdb, __Decrypt, __Encrypt, __Hash, __HashKey, __Log_tbl, __authenticate, __create, __dbg, __dbready, __dbreadyque, __delete, __initdb, __objAuth, __prune, __update,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  sqlite3 = require('sqlite3');

  events = require('events');

  crypto = require('crypto');

  __HashKey = null;

  __dbg = false;

  __Authdb = null;

  __dbready = false;

  __dbreadyque = [];

  __Auth_tbl = "CREATE TABLE IF NOT EXISTS _auth (";

  __Auth_tbl += " authUID INTEGER PRIMARY KEY,";

  __Auth_tbl += " authNameHash TEXT,";

  __Auth_tbl += " authPubKey TEXT,";

  __Auth_tbl += " authPWHash TEXT,";

  __Auth_tbl += " authPWSalt TEXT,";

  __Auth_tbl += " authPerm TEXT,";

  __Auth_tbl += " isEnabled INTEGER";

  __Auth_tbl += " )";

  __Log_tbl = "CREATE TABLE IF NOT EXISTS _log (";

  __Log_tbl += "eventUID INTEGER PRIMARY KEY, ";

  __Log_tbl += "TimeStamp TEXT NOT NULL, ";

  __Log_tbl += "eventType TEXT NOT NULL, ";

  __Log_tbl += "eventDetails TEXT NOT NULL";

  __Log_tbl += " )";

  __Encrypt = function(aMsg, aSecret) {
    var cipher;
    if (__dbg) {
      console.log('__Encrypt');
    }
    cipher = crypto.createCipher('aes-256-cbc', aSecret);
    cipher.update(aMsg, 'utf8', 'base64');
    return cipher.final('base64');
  };

  __Decrypt = function(aMsg, aSecret) {
    var decipher;
    if (__dbg) {
      console.log('__Decrypt');
    }
    decipher = crypto.createDecipher('aes-256-cbc', aSecret);
    decipher.update(aMsg.replace(/\s/g, "+"), 'base64', 'utf8');
    return decipher.final('utf8');
  };

  __Hash = function(aValue, aKey, aSalt) {
    var tHash;
    if (__dbg) {
      console.log('__Hash');
    }
    tHash = crypto.createHmac('sha256', aKey);
    if (aValue != null) {
      tHash.update(aValue);
    }
    if (aSalt != null) {
      tHash.update(aSalt);
    }
    return tHash.digest('base64');
  };

  __initdb = function(aOpt) {
    var dbpath;
    if (__dbg) {
      console.log('__initdb');
    }
    if (__Authdb != null) {
      if (aOpt.callback != null) {
        aOpt.callback('__Authdb already exists');
      }
      return;
    }
    __HashKey = aOpt.hashkey;
    if ((aOpt != null) && (aOpt.path != null)) {
      dbpath = aOpt.path;
    }
    if (__dbg) {
      if (dbpath == null) {
        dbpath = "_auth.db";
      }
    }
    if (aOpt.callback != null) {
      __dbreadyque.push(aOpt.callback);
    }
    __Authdb = new sqlite3.Database(dbpath, function() {
      if (__dbg) {
        console.log('db created');
      }
      __Authdb.run(__Auth_tbl, function() {
        if (__dbg) {
          console.log(' - tbl _auth created');
        }
        __Authdb.run(__Log_tbl, function() {
          var fn, _i, _len;
          if (__dbg) {
            console.log(' - tbl _log created');
          }
          __dbready = true;
          for (_i = 0, _len = __dbreadyque.length; _i < _len; _i++) {
            fn = __dbreadyque[_i];
            fn();
          }
        });
      });
    });
  };

  __prune = function(aObj, aList) {
    var k, tRet, v;
    if (__dbg) {
      console.log('__prune');
    }
    tRet = {};
    for (k in aObj) {
      v = aObj[k];
      if (__indexOf.call(aList, k) >= 0) {
        tRet[k] = v;
      }
    }
    return tRet;
  };

  __create = function(aOpt) {
    var oAuth, tOpt;
    if (__dbg) {
      console.log('__create');
    }
    tOpt = __prune(aOpt, ['username', 'userpass', 'pubkey', 'callback']);
    if ((tOpt.username == null) || (tOpt.userpass == null)) {
      if (tOpt.callback != null) {
        tOpt.callback('create error');
      }
      return;
    }
    oAuth = new __objAuth(tOpt);
    oAuth._find();
    oAuth.on('updated', (function(_this) {
      return function() {
        oAuth._respondOnce(null, oAuth.PostQuery.authUID);
      };
    })(this));
    oAuth.on('error', (function(_this) {
      return function() {
        oAuth._respondOnce('gen error');
      };
    })(this));
    oAuth.on('does_exists', (function(_this) {
      return function() {
        oAuth._respondOnce('already exists');
      };
    })(this));
    oAuth.on('doesnt_exist', (function(_this) {
      return function() {
        oAuth._update();
      };
    })(this));
  };

  __authenticate = function(aOpt) {
    var oAuth, tOpt;
    if (__dbg) {
      console.log('__authenticate');
    }
    tOpt = __prune(aOpt, ['username', 'userpass', 'callback']);
    if ((tOpt.username == null) || !((tOpt.userpass != null) || ((tOpt.keychal != null) && (tOpt.keyresp != null)))) {
      if (tOpt.callback != null) {
        tOpt.callback('auth error');
      }
      return;
    }
    oAuth = new __objAuth(tOpt);
    oAuth._find();
    oAuth.on('does_exists', (function(_this) {
      return function() {
        var tHash, tSalt, tTest;
        if (true) {
          tSalt = oAuth.PostQuery.authPWSalt;
          tHash = oAuth.PostQuery.authPWHash;
          tTest = __Hash(oAuth.PreQuery.userpass, __HashKey, tSalt);
          if (tTest === tHash && oAuth.PostQuery.isEnabled === 1) {
            oAuth._respondOnce(null, oAuth.PostQuery.authUID);
          } else {
            oAuth._respondOnce('bad password');
          }
          return;
        }
      };
    })(this));
    oAuth.on('doesnt_exist', (function(_this) {
      return function() {
        oAuth._respondOnce('doesnt exist');
      };
    })(this));
  };

  __update = function(aOpt) {
    var oAuth, tOpt;
    if (__dbg) {
      console.log('__update');
    }
    tOpt = __prune(aOpt, ['userid', 'username', 'userpass', 'pubkey', 'perm', 'isEnabled', 'callback']);
    if (tOpt.userid == null) {
      if (tOpt.callback != null) {
        tOpt.callback('update error');
      }
      return;
    }
    oAuth = new __objAuth(tOpt);
    oAuth._find();
    oAuth.on('updated', (function(_this) {
      return function() {
        oAuth._respondOnce(null, oAuth.PostQuery.authUID);
      };
    })(this));
    oAuth.on('error', (function(_this) {
      return function() {
        oAuth._respondOnce('gen error');
      };
    })(this));
    oAuth.on('does_exists', (function(_this) {
      return function() {
        oAuth._update();
      };
    })(this));
    oAuth.on('doesnt_exist', (function(_this) {
      return function() {
        oAuth._respondOnce('doesnt exists');
      };
    })(this));
  };

  __delete = function(aOpt) {
    var oAuth, tOpt;
    if (__dbg) {
      console.log('__delete');
    }
    tOpt = __prune(aOpt, ['userid', 'callback']);
    if (tOpt.userid == null) {
      if (tOpt.callback != null) {
        tOpt.callback('delete error');
      }
      return;
    }
    tOpt.isEnabled = 0;
    oAuth = new __objAuth(tOpt);
    oAuth._find();
    oAuth.on('updated', (function(_this) {
      return function() {
        oAuth._respondOnce(null, oAuth.PostQuery.authUID);
      };
    })(this));
    oAuth.on('error', (function(_this) {
      return function() {
        oAuth._respondOnce('gen error');
      };
    })(this));
    oAuth.on('does_exists', (function(_this) {
      return function() {
        oAuth._update();
      };
    })(this));
    oAuth.on('doesnt_exist', (function(_this) {
      return function() {
        oAuth._respondOnce('doesnt exists');
      };
    })(this));
  };

  __objAuth = (function() {
    function __objAuth(aOpt) {
      var k, v, _error, _updating;
      events.EventEmitter.call(this);
      _error = null;
      _updating = false;
      this.PreQuery = {
        source: null,
        userid: null,
        username: null,
        userpass: null,
        keychal: null,
        keyresp: null,
        pubkey: null,
        callback: null,
        perm: null,
        isEnabled: null
      };
      this.PostQuery = {
        authUID: null,
        authNameHash: null,
        authPWHash: null,
        authPubKey: null,
        authPWSalt: null,
        authPerm: null,
        isEnabled: null
      };
      this.taskQue = [];
      if (aOpt != null) {
        for (k in aOpt) {
          v = aOpt[k];
          this.PreQuery[k] = v;
        }
      }
      this._respondOnce = (function(_this) {
        return function(e, r) {
          if (_this.PreQuery.callback != null) {
            _this.PreQuery.callback(e, r);
          }
          _this.PreQuery.callback = null;
          return clearTimeout(_this.selfDestruct);
        };
      })(this);
      this.selfDestruct = setTimeout(this.destroy, 2000);
    }

    __objAuth.prototype.destroy = function() {
      this._respondOnce('self destruct');
      return this.removeAllListeners();
    };

    __objAuth.prototype._update = function() {
      var sql_callback, tCol, tFill, tStmt, tVal;
      if (__dbg) {
        console.log('_update');
      }
      sql_callback = (function(_this) {
        return function(e, r) {
          if (e != null) {
            _this._error = e;
            _this.emit('error');
            _this.emit('_update_error');
            return;
          }
          _this._updating = true;
          _this._find();
        };
      })(this);
      tFill = {};
      if (this.PreQuery.username != null) {
        tFill.$authNameHash = __Hash(this.PreQuery.username, __HashKey);
      }
      if (this.PreQuery.userpass != null) {
        tFill.$authPWSalt = crypto.randomBytes(32).toString('base64');
        tFill.$authPWHash = __Hash(this.PreQuery.userpass, __HashKey, tFill.$authPWSalt);
      }
      tFill.$authPubKey = this.PreQuery.pubkey;
      if (this.PreQuery.authPerm != null) {
        tFill.$authPerm = this.PreQuery.perm;
      }
      if (this.PreQuery.isEnabled != null) {
        tFill.$isEnabled = this.PreQuery.isEnabled;
      }
      if (tFill.$authNameHash == null) {
        tFill.$authNameHash = this.PostQuery.authNameHash;
      }
      if (tFill.$authPubKey == null) {
        tFill.$authPubKey = this.PostQuery.authPubKey || "";
      }
      if (tFill.$authPWSalt == null) {
        tFill.$authPWSalt = this.PostQuery.authPWSalt;
      }
      if (tFill.$authPWHash == null) {
        tFill.$authPWHash = this.PostQuery.authPWHash;
      }
      if (tFill.$authPerm == null) {
        tFill.$authPerm = this.PostQuery.authPerm || "";
      }
      if (this.PreQuery.isEnabled != null) {
        tFill.$isEnabled = this.PreQuery.isEnabled;
      }
      if (this.PostQuery.isEnabled != null) {
        if (tFill.$isEnabled == null) {
          tFill.$isEnabled = this.PostQuery.isEnabled;
        }
      }
      if (tFill.$isEnabled == null) {
        tFill.$isEnabled = 1;
      }
      if (this.authUID != null) {
        if (this.authUID != null) {
          tFill.$authUID = this.authUID;
        }
        tCol = "authUID,";
        tVal = "$authUID,";
      } else {
        tCol = "";
        tVal = "";
      }
      tStmt = "REPLACE INTO _auth (" + tCol + "authNameHash,authPubKey,authPWHash,authPWSalt,authPerm,isEnabled) ";
      tStmt += "VALUES (" + tVal + "$authNameHash,$authPubKey,$authPWHash,$authPWSalt,$authPerm,$isEnabled) ";
      __Authdb.run(tStmt, tFill, sql_callback);
    };

    __objAuth.prototype._find = function() {
      var sql_callback, tNameHash;
      if (__dbg) {
        console.log('_find');
      }
      sql_callback = (function(_this) {
        return function(e, r) {
          if (e != null) {
            if (__dbg) {
              console.log(e);
            }
            _this._error = e;
            _this.emit('error');
            _this.emit('_find_error');
            return;
          }
          return _this._populate(r);
        };
      })(this);
      if (this.PreQuery.userid != null) {
        __Authdb.get(" SELECT * FROM _auth WHERE authUID = ?", this.PreQuery.userid, sql_callback);
        return;
      }
      if (this.PreQuery.username != null) {
        tNameHash = __Hash(this.PreQuery.username, __HashKey);
        __Authdb.get(" SELECT * FROM _auth WHERE authNameHash = ?", tNameHash, sql_callback);
        return;
      }
      this.emit('error');
      this.emit('_find_error');
    };

    __objAuth.prototype._populate = function(r) {
      if (__dbg) {
        console.log('_populate');
      }
      if (r != null) {
        this.PostQuery.authUID = r.authUID;
        this.PostQuery.authNameHash = r.authNameHash;
        this.PostQuery.authPWHash = r.authPWHash;
        this.PostQuery.authPubKey = r.authPubKey;
        this.PostQuery.authPWSalt = r.authPWSalt;
        this.PostQuery.authPerm = r.authPerm;
        this.PostQuery.isEnabled = r.isEnabled;
        if (!this._updating) {
          this.emit('does_exists');
        } else {
          this._updating = false;
          this.emit('updated');
        }
      } else {
        this.emit('doesnt_exist');
      }
    };

    return __objAuth;

  })();

  __objAuth.prototype.__proto__ = events.EventEmitter.prototype;

  module.exports = {
    init: function(aOpt) {
      __initdb(aOpt);
    },
    close: function(aFn) {
      var nullit;
      nullit = (function(_this) {
        return function(e) {
          __Authdb = null;
          __dbready = false;
          __dbreadyque = [];
          if (aFn != null) {
            aFn(e);
          }
        };
      })(this);
      if (__Authdb != null) {
        __Authdb.close(nullit);
      } else {
        if (aFn != null) {
          aFn();
        }
      }
    },
    debug: function() {
      __dbg = true;
    },
    create: function(aOpt) {
      if (!__dbready) {
        __dbreadyque.push((function(_this) {
          return function() {
            return __create(aOpt);
          };
        })(this));
        return;
      }
      __create(aOpt);
    },
    authenticate: function(aOpt) {
      if (!__dbready) {
        __dbreadyque.push((function(_this) {
          return function() {
            return __authenticate(aOpt);
          };
        })(this));
        return;
      }
      __authenticate(aOpt);
    },
    update: function(aOpt) {
      if (!__dbready) {
        __dbreadyque.push((function(_this) {
          return function() {
            return __update(aOpt);
          };
        })(this));
        return;
      }
      __update(aOpt);
    },
    "delete": function(aOpt) {
      if (!__dbready) {
        __dbreadyque.push((function(_this) {
          return function() {
            return __delete(aOpt);
          };
        })(this));
        return;
      }
      __delete(aOpt);
    }
  };

}).call(this);

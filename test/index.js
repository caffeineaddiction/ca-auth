// Generated by CoffeeScript 1.8.0
(function() {
  var crypto, db_auth, db_close, db_create, db_del, db_init, db_update, fs, should, __$hashkey, _auth;

  crypto = require('crypto');

  _auth = require('../index');

  should = require('chai').should();

  fs = require('fs');

  db_init = _auth.init;

  db_close = _auth.close;

  db_create = _auth.create;

  db_auth = _auth.authenticate;

  db_update = _auth.update;

  db_del = _auth["delete"];

  __$hashkey = crypto.randomBytes(32).toString('base64');

  beforeEach(function(done) {
    return db_close(function(e) {
      var arg;
      should.not.exist(e);
      arg = {};
      arg['hashkey'] = __$hashkey;
      arg['path'] = ':memory:';
      arg['callback'] = function(e) {
        var c_arg;
        should.not.exist(e);
        c_arg = {};
        c_arg['username'] = 'foo';
        c_arg['userpass'] = 'bar';
        c_arg['callback'] = function(e, r) {
          should.not.exist(e);
          should.exist(r);
          if (r != null) {
            r.should.equal(1);
          }
          return done();
        };
        return db_create(c_arg);
      };
      return db_init(arg);
    });
  });

  afterEach(function(done) {
    return db_close(function(e) {
      should.not.exist(e);
      return done();
    });
  });

  describe('init() - {hashkey, path, [callback]}', function() {
    it('create :memory:', function(done) {
      return db_close(function(e) {
        var arg;
        should.not.exist(e);
        arg = {};
        arg['hashkey'] = __$hashkey;
        arg['path'] = ':memory:';
        arg['callback'] = function(e) {
          should.not.exist(e);
          return done();
        };
        return db_init(arg);
      });
    });
    return it('e: db exists error', function(done) {
      var arg;
      arg = {};
      arg['hashkey'] = __$hashkey;
      arg['path'] = ':memory:';
      arg['callback'] = function(e) {
        e.should.equal('__Authdb already exists');
        return done();
      };
      return db_init(arg);
    });
  });

  describe('close() - [callback]', function() {
    it('db exists', function(done) {
      return db_close(function(e) {
        should.not.exist(e);
        return done();
      });
    });
    return it('db not exists', function(done) {
      return db_close(function(e) {
        return db_close(function(e) {
          should.not.exist(e);
          return done();
        });
      });
    });
  });

  describe('create() - {username, userpass, [pubkey], [callback]}', function() {
    it('create', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'newfoo';
      arg['userpass'] = 'newbar';
      arg['callback'] = function(e, r) {
        should.not.exist(e);
        r.should.equal(2);
        return done();
      };
      return db_create(arg);
    });
    it('e: exists', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'foo';
      arg['userpass'] = 'bar';
      arg['callback'] = function(e, r) {
        e.should.equal('already exists');
        should.not.exist(r);
        return done();
      };
      return db_create(arg);
    });
    it('e: no username', function(done) {
      var arg;
      arg = {};
      arg['userpass'] = 'bar';
      arg['callback'] = function(e, r) {
        e.should.equal('create error');
        should.not.exist(r);
        return done();
      };
      return db_create(arg);
    });
    return it('e: no userpass', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'foo';
      arg['callback'] = function(e, r) {
        e.should.equal('create error');
        should.not.exist(r);
        return done();
      };
      return db_create(arg);
    });
  });

  describe('authenticate() - {username, userpass, [callback]}', function() {
    it('auth', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'foo';
      arg['userpass'] = 'bar';
      arg['callback'] = function(e, r) {
        should.not.exist(e);
        r.should.equal(1);
        return done();
      };
      return db_auth(arg);
    });
    it('e: not exist', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'notfoo';
      arg['userpass'] = 'notbar';
      arg['callback'] = function(e, r) {
        done();
        return e.should.equal('doesnt exist');
      };
      return db_auth(arg);
    });
    it('e: bad pass', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'foo';
      arg['userpass'] = 'badbar';
      arg['callback'] = function(e, r) {
        e.should.equal('bad password');
        return done();
      };
      return db_auth(arg);
    });
    it('e: no username', function(done) {
      var arg;
      arg = {};
      arg['userpass'] = 'bar';
      arg['callback'] = function(e, r) {
        e.should.equal('auth error');
        return done();
      };
      return db_auth(arg);
    });
    return it('e: no userpass', function(done) {
      var arg;
      arg = {};
      arg['username'] = 'foo';
      arg['callback'] = function(e, r) {
        e.should.equal('auth error');
        return done();
      };
      return db_auth(arg);
    });
  });

  describe('update() - {userid, [username], [userpass], [pubkey], [perm], [isEnabled], [callback]}', function() {
    it('updated', function(done) {
      var arg;
      arg = {};
      arg['userid'] = 1;
      arg['username'] = 'updatedfoo';
      arg['userpass'] = 'updatedbar';
      arg['pubkey'] = 'not implemented yet';
      arg['perm'] = 'not implemented yet';
      arg['isEnabled'] = 1;
      arg['callback'] = function(e, r) {
        should.not.exist(e);
        r.should.equal(1);
        return done();
      };
      return db_update(arg);
    });
    it('not exist', function(done) {
      var arg;
      arg = {};
      arg['userid'] = 99;
      arg['callback'] = function(e, r) {
        e.should.equal('doesnt exists');
        return done();
      };
      return db_update(arg);
    });
    return it('update error', function(done) {
      var arg;
      arg = {};
      arg['callback'] = function(e, r) {
        e.should.equal('update error');
        return done();
      };
      return db_update(arg);
    });
  });

  describe('delete() - {userid, [callback]}', function() {
    it('deleted', function(done) {
      var arg;
      arg = {};
      arg['userid'] = 1;
      arg['callback'] = function(e, r) {
        should.not.exist(e);
        r.should.equal(1);
        return done();
      };
      return db_del(arg);
    });
    it('delete error', function(done) {
      var arg;
      arg = {};
      arg['callback'] = function(e, r) {
        e.should.equal('delete error');
        return done();
      };
      return db_del(arg);
    });
    return it('not exist', function(done) {
      var arg;
      arg = {};
      arg['userid'] = 2;
      arg['callback'] = function(e, r) {
        e.should.equal('doesnt exists');
        return done();
      };
      return db_del(arg);
    });
  });

}).call(this);

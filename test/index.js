// Generated by CoffeeScript 1.8.0
(function() {
  var auth, create, dbclose, del, fs, init, should, update, _auth;

  _auth = require('../index');

  should = require('chai').should();

  fs = require('fs');

  init = _auth.init;

  dbclose = _auth.dbclose;

  create = _auth.create;

  auth = _auth.authenticate;

  update = _auth.update;

  del = _auth["delete"];

  beforeEach(function() {
    return process.stdout.write('');
  });

  describe('init {key, path, callback}', function() {
    return it('creates :memory:', function(done) {
      var arg;
      arg = {};
      arg.path = ':memory:';
      arg['callback'] = function(e) {
        should.not.exist(e);
        return done();
      };
      return init(arg);
    });
  });

  describe('create {authName, authPW}', function() {
    it('created', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          var arg;
          arg = {};
          arg['authName'] = 'Name';
          arg['authPW'] = 'Pass';
          arg['callback'] = function(r) {
            r.should.equal('created');
            return done();
          };
          return create(arg);
        }
      });
    });
    it('no name', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          var arg;
          arg = {};
          arg['authPW'] = 'Pass';
          arg['callback'] = function(r) {
            r.should.equal('create error');
            return done();
          };
          return create(arg);
        }
      });
    });
    it('no pass', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          var arg;
          arg = {};
          arg['authName'] = 'Name';
          arg['callback'] = function(r) {
            r.should.equal('create error');
            return done();
          };
          return create(arg);
        }
      });
    });
    return it('exists', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          var arg;
          arg = {};
          arg['authName'] = 'Name';
          arg['authPW'] = 'Pass';
          arg['callback'] = function(r) {
            arg = {};
            arg['authName'] = 'Name';
            arg['authPW'] = 'Pass';
            arg['callback'] = function(r) {
              r.should.equal('exists');
              return done();
            };
            return create(arg);
          };
          return create(arg);
        }
      });
    });
  });

  describe('auth {authName, authPW, callback}', function() {
    it('authed', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'foo';
              arg['authPW'] = 'bar';
              arg['callback'] = function(r) {
                r.should.equal(1);
                return done();
              };
              return auth(arg);
            }
          });
        }
      });
    });
    it('no name', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authPW'] = 'bar';
              arg['callback'] = function(r) {
                r.should.equal('no name');
                return done();
              };
              return auth(arg);
            }
          });
        }
      });
    });
    it('no pass', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'foo';
              arg['callback'] = function(r) {
                r.should.equal('no pass');
                return done();
              };
              return auth(arg);
            }
          });
        }
      });
    });
    it('not exist', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'not foo';
              arg['authPW'] = 'bar';
              arg['callback'] = function(r) {
                r.should.equal('not exist');
                return done();
              };
              return auth(arg);
            }
          });
        }
      });
    });
    it('bad pass', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'foo';
              arg['authPW'] = 'not bar';
              arg['callback'] = function(r) {
                r.should.equal('bad pass');
                return done();
              };
              return auth(arg);
            }
          });
        }
      });
    });
    return it('disabled', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              return update({
                authUID: 1,
                isEnabled: 0,
                callback: function() {
                  var arg;
                  arg = {};
                  arg['authName'] = 'foo';
                  arg['authPW'] = 'bar';
                  arg['callback'] = function(r) {
                    r.should.equal('disabled');
                    return done();
                  };
                  return auth(arg);
                }
              });
            }
          });
        }
      });
    });
  });

  describe('update {authUID, authName, authPW, authPerm, isEnabled, callback}', function() {
    it('updated', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'foo';
              arg['authPW'] = 'newbar';
              arg['callback'] = function(r) {
                r.should.equal('updated');
                return done();
              };
              return update(arg);
            }
          });
        }
      });
    });
    it('not exist', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authName'] = 'notfoo';
              arg['authPW'] = 'bar';
              arg['callback'] = function(r) {
                r.should.equal('not exist');
                return done();
              };
              return update(arg);
            }
          });
        }
      });
    });
    return it('update error', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg['authPW'] = 'bar';
              arg['callback'] = function(r) {
                r.should.equal('_find error');
                return done();
              };
              return update(arg);
            }
          });
        }
      });
    });
  });

  describe('del {authUID, callback}', function() {
    it('deleted', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg.authUID = 1;
              arg['callback'] = function(r) {
                r.should.equal('updated');
                return done();
              };
              return update(arg);
            }
          });
        }
      });
    });
    return it('not exist', function(done) {
      return init({
        path: ':memory:',
        callback: function() {
          return create({
            authName: 'foo',
            authPW: 'bar',
            callback: function() {
              var arg;
              arg = {};
              arg.authUID = -1;
              arg['callback'] = function(r) {
                r.should.equal('not exist');
                return done();
              };
              return update(arg);
            }
          });
        }
      });
    });
  });

}).call(this);
